name: Deploy Dashboards

# Triggered after Coolify successfully deploys the project.
# Runs automatically after Coolify finishes a deploy **or** on demand.
on:
  # Sent from Coolify (project webhook) â€“ see docs for setup.
  repository_dispatch:
    types: [coolify-deployed]

  # Manual trigger in the GitHub UI â€“ useful for testing.
  workflow_dispatch:

jobs:
  deploy-dashboards:
    runs-on: ubuntu-latest

    steps:
      # Check out the current project (required by composite action).
      - uses: actions/checkout@v4

      # ------------------------------------------------------------------
      # ðŸ©º TEMP DEBUG STEPS â€“ remove once token confirmed working
      # ------------------------------------------------------------------
      - name: Debug â€“ token length
        run: echo "MONITORING_REPO_PAT length: ${#MONITORING_REPO_PAT}"
        env:
          MONITORING_REPO_PAT: ${{ secrets.MONITORING_REPO_PAT }}

      - name: Debug â€“ can token access repo?
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $MONITORING_REPO_PAT" \
            https://api.github.com/repos/cipher982/datahouse)
          echo "GitHub API returned: $STATUS"
        env:
          MONITORING_REPO_PAT: ${{ secrets.MONITORING_REPO_PAT }}

      # Pull the central monitoring stack (dashboards live there).
      - name: Clone monitoring stack repo (private)
        uses: actions/checkout@v4
        with:
          repository: cipher982/datahouse  # monitoring repo
          path: monitoring-stack
          token: ${{ secrets.MONITORING_REPO_PAT }}  # PAT with repo read access

      # Deploy dashboards using the composite action that lives *inside* the
      # monitoring-stack repo we just cloned.
      - name: Deploy dashboards to Grafana
        uses: ./monitoring-stack
        with:
          grafana-url: ${{ secrets.GRAFANA_URL }}
          grafana-api-key: ${{ secrets.GRAFANA_API_KEY }}
          dashboards-path: monitoring-stack/grafana/dashboards

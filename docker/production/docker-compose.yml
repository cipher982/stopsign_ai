services:

  video_analyzer:
    build:
      context: ../..
      dockerfile: docker/production/Dockerfile.processor
    env_file:
      - .env
    environment:
      REDIS_URL: ${REDIS_URL}
      PROMETHEUS_PORT: ${PROMETHEUS_PORT}
      RAW_FRAME_KEY: ${RAW_FRAME_KEY}
      PROCESSED_FRAME_KEY: ${PROCESSED_FRAME_KEY}
      YOLO_MODEL_NAME: ${YOLO_MODEL_NAME}
      DB_URL: ${DB_URL}
      ANALYZER_HEALTH_PORT: ${ANALYZER_HEALTH_PORT:-8081}
      ANALYZER_STALL_SEC: ${ANALYZER_STALL_SEC:-120}
    volumes:
      - config-dir:/app/config
    networks:
      - default
      - monitoring
      - coolify
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0']
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:${ANALYZER_HEALTH_PORT:-8081}/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  ffmpeg_service:
    build:
      context: ../..
      dockerfile: docker/production/Dockerfile.ffmpeg
    env_file:
      - .env
    environment:
      REDIS_URL: ${REDIS_URL}
      PROCESSED_FRAME_KEY: ${PROCESSED_FRAME_KEY}
      FFMPEG_ENCODER: ${FFMPEG_ENCODER}
      FFMPEG_PRESET: ${FFMPEG_PRESET}
      # HLS staleness threshold and watchdog are baked into the service code
    volumes:
      - storage-dir:/app/data
    depends_on:
      - video_analyzer
    networks:
      - default
      - monitoring
      - coolify
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0']
              capabilities:
                - gpu
                - video
    healthcheck:
      # Use liveness-only endpoint to avoid flapping on transient HLS staleness
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 5s
      retries: 10
      start_period: 60s
    restart: always

  web_server:
    build:
      context: ../..
      dockerfile: docker/production/Dockerfile.web
    ports:
      - ${WEB_SERVER_PORT}:8000
    env_file:
      - .env
    environment:
      DB_URL: ${DB_URL}
      # HLS staleness threshold is baked into the service code
    depends_on:
      - video_analyzer
    volumes:
      - storage-dir:/app/data
      - config-dir:/app/config
    networks:
      - default
      - monitoring
      - coolify
    healthcheck:
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:8000/healthz"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 60s
    restart: always

networks:
  default:
  monitoring:
    name: monitoring
    external: true
  coolify:
    name: coolify
    external: true

volumes:
  storage-dir:
  config-dir:

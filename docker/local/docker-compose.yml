# Local Development Docker Compose
# Self-contained stack with all services and local storage

services:
  # Local Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - ../../volumes/redis:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: always

  # Local PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: stopsign
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - ../../volumes/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    ports:
      - "9002:9000"
      - "9003:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - ../../volumes/minio:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: always

  # RTSP to Redis (with file:// support)
  rtsp_to_redis:
    build:
      context: ../..
      dockerfile: docker/local/Dockerfile.rtsp.local
    environment:
      - ENV=${ENV}
      - REDIS_URL=${REDIS_URL}
      - RTSP_URL=${RTSP_URL}
      - RAW_FRAME_KEY=${RAW_FRAME_KEY}
      - FRAME_BUFFER_SIZE=${FRAME_BUFFER_SIZE}
      - PROMETHEUS_PORT=${PROMETHEUS_PORT}
    depends_on:
      - redis
    volumes:
      - ../../sample_data:/app/sample_data:ro
      - ../../rtsp_to_redis:/app/rtsp_to_redis:rw  # Live code mounting
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  # Video Analyzer (CPU-only)
  video_analyzer:
    build:
      context: ../..
      dockerfile: docker/local/Dockerfile.processor.local
    environment:
      - ENV=${ENV}
      - REDIS_URL=${REDIS_URL}
      - DB_URL=${DB_URL}
      - RAW_FRAME_KEY=${RAW_FRAME_KEY}
      - PROCESSED_FRAME_KEY=${PROCESSED_FRAME_KEY}
      - YOLO_MODEL_NAME=${YOLO_MODEL_NAME}
      - YOLO_DEVICE=${YOLO_DEVICE}
      - PROMETHEUS_PORT=${PROMETHEUS_PORT}
      - ANALYZER_HEALTH_PORT=${ANALYZER_HEALTH_PORT:-8081}
      - ANALYZER_STALL_SEC=${ANALYZER_STALL_SEC:-120}
      - RTSP_URL=${RTSP_URL}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET=${MINIO_BUCKET}
    depends_on:
      - redis
      - postgres
    volumes:
      - ../../models:/app/models:ro
      - ../../stopsign:/app/stopsign:rw  # Live code mounting
      - ../../config:/app/config:rw  # Shared config directory
    # No GPU deployment constraints for local development
    healthcheck:
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:${ANALYZER_HEALTH_PORT:-8081}/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  # FFmpeg Service (CPU encoding)
  ffmpeg_service:
    build:
      context: ../..
      dockerfile: docker/local/Dockerfile.ffmpeg.local
    environment:
      - ENV=${ENV}
      - REDIS_URL=${REDIS_URL}
      - PROCESSED_FRAME_KEY=${PROCESSED_FRAME_KEY}
      - FFMPEG_ENCODER=${FFMPEG_ENCODER}
      - FFMPEG_PRESET=${FFMPEG_PRESET}
      # HLS staleness threshold and watchdog are baked into the service code
    depends_on:
      - video_analyzer
    volumes:
      - ../../volumes/hls:/app/data
      - ../../stopsign:/app/stopsign:rw  # Live code mounting
    # No GPU deployment constraints for local development
    healthcheck:
      # Use liveness-only endpoint to avoid flapping on transient HLS staleness
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 5s
      retries: 10
      start_period: 60s
    restart: always

  # Web Server
  web_server:
    build:
      context: ../..
      dockerfile: docker/local/Dockerfile.web.local
    ports:
      - "${WEB_SERVER_PORT}:8000"
    environment:
      - ENV=${ENV}
      - DB_URL=${DB_URL}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET=${MINIO_BUCKET}
      - MINIO_PUBLIC_URL=${MINIO_PUBLIC_URL}
      # HLS staleness threshold is baked into the service code
    depends_on:
      - postgres
      - video_analyzer
    volumes:
      - ../../volumes/hls:/app/data
      - ../../stopsign:/app/stopsign:rw  # Live code mounting
      - ../../static:/app/static:ro # Mount static files
      - ../../config:/app/config:rw  # Shared config directory
    healthcheck:
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:8000/healthz"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 60s
    restart: always

# Simple local networking
networks:
  default:
    driver: bridge
